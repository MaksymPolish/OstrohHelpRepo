using Application.Common;
using Domain.Inventory;
using Domain.Inventory.Statuses;
using Domain.Users;
using Domain.Users.Roles;
using MediatR;

namespace Application.Questionnaire.Exceptions;

public abstract class QuestionnairesException(QuestionaryId id, string message, Exception? exception = null) 
    : Exception(message, exception), IRequest<Result<Questionary, QuestionnairesException>>
{
    public QuestionaryId questionaryId { get; } = id;
}

public class QuestionnaireUnknownException : QuestionnairesException
{
    public QuestionnaireUnknownException(QuestionaryId id, Exception innerException) : base(id, $"An unknown error occurred while processing questionnaires '{id}'.", innerException) { }
}

public class QuestionnaireNotFoundException : QuestionnairesException
{
    public QuestionnaireNotFoundException(QuestionaryId id) : base(id, $"Questionnaire with ID '{id}' was not found.") { }
}

public class QuestionnaireAlreadyAcceptedException : QuestionnairesException
{
    public QuestionaryId Id { get; }

    public QuestionnaireAlreadyAcceptedException(QuestionaryId id)
        : base($"This questionary is already accepted. ID: {id}")
    {
        Id = id;
    }
}

public class InvalidPsychologistRoleException : QuestionnairesException
{
    public UserId Id { get; }

    public InvalidPsychologistRoleException(UserId id)
        : base($"User with ID '{id}' is not a psychologist.")
    {
        Id = id;
    }
}

public class PsychologistNotFoundException : QuestionnairesException
{
    public UserId Id { get; }

    public PsychologistNotFoundException(UserId id)
        : base($"Psychologist with ID '{id}' not found.")
    {
        Id = id;
    }
}

public class RoleNotFoundException : QuestionnairesException
{
    public RoleId Id { get; }

    public RoleNotFoundException(RoleId id)
        : base($"Role with ID '{id}' not found.")
    {
        Id = id;
    }
}

public class ConsultationStatusNotFoundException : QuestionnairesException
{
    public ConsultationStatusNotFoundException(string name)
        : base($"Consultation status '{name}' not found.")
    {
    }
}

public class QuestionnaireStatusNotFoundException : QuestionnairesException
{
    public questionaryStatusId StatusId { get; }

    public QuestionnaireStatusNotFoundException(string statusId)
        : base($"Questionary status '{statusId}' not found.")
    {
        StatusId = new QuestionaryStatusesId(Guid.Parse(statusId));
    }
}