using Application.Common;
using Application.Common.Interfaces.Queries;
using Application.Common.Interfaces.Repositories;
using Application.Messages.Exceptions;
using Domain.Messages;
using MediatR;

namespace Application.Messages.Commands;

public record UpdateMessageCommand(Guid id, string text) : IRequest<Result<Message, MessageExceptions>>;

public class UpdateMessageCommandHandler(
    IMessageQuery _messageQuery,
    IMessageRepository _messageRepository) 
    : IRequestHandler<UpdateMessageCommand, Result<Message, MessageExceptions>>
{
    public async Task<Result<Message, MessageExceptions>> Handle(UpdateMessageCommand command, CancellationToken ct)
    {
        var messageId = new MessageId(command.id);
        var messageOption = await _messageQuery.GetMessageById(messageId, ct);

        return await messageOption.Match(
            async message =>
            {
                // --- Оновлення тексту ---
                message.UpdateText(command.Text);
                
                // --- Збереження через репозиторій ---
                return await _messageRepository.UpdateAsync(message, ct);
            },
            () => Task.FromResult<Result<Message, MessageExceptions>>(
                new MessageNotFoundException(messageId)
            )
        );
    }
}